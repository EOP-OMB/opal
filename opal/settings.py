"""
Django settings for opal project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import logging
import secrets
from pathlib import Path
import os
import environ

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = 'static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = 'media/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'vendor')]

env = environ.Env()
if str(BASE_DIR) + "/opal/.env":
    environ.Env.read_env()

# Load environment variables and set defaults
default_secret_key = secrets.token_urlsafe()

ENVIRONMENT = os.getenv("ENVIRONMENT", default="development")
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("OPAL_SECRET_KEY", default=default_secret_key)
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", default="False")
LOG_LEVEL = os.getenv("LOG_LEVEL", default="INFO")
# Set proxy servers if needed. This will be used when the app attempts to download catalog files from the internet
HTTP_PROXY = os.getenv("HTTP_PROXY", default=False)
HTTPS_PROXY = os.getenv("HTTPS_PROXY", default=False)
# Database settings
DATABASE = os.getenv("DATABASE", default="sqlite")
DB_NAME = os.getenv("DB_NAME", default="db.sqlite3")
# These can be blank if using sqlite
DB_PASSWORD = os.getenv("DB_PASSWORD", default="")
DB_USER = os.getenv("DB_USER", default="opal")
DB_HOST = os.getenv("DB_HOST", default="localhost")
DB_PORT = os.getenv("DB_PORT", default="5432")
# SAML settings
ENABLE_SAML = os.getenv("ENABLE_SAML", default=False)
OIDC_RP_CLIENT_ID = os.getenv("OIDC_RP_CLIENT_ID", default="")
OIDC_RP_CLIENT_SECRET = os.getenv("OIDC_RP_CLIENT_SECRET", default="")
OIDC_OP_AUTHORIZATION_ENDPOINT = os.getenv("OIDC_OP_AUTHORIZATION_ENDPOINT", default="")
OIDC_OP_TOKEN_ENDPOINT = os.getenv("OIDC_OP_TOKEN_ENDPOINT", default="")
OIDC_OP_USER_ENDPOINT = os.getenv("OIDC_OP_USER_ENDPOINT", default="")
OIDC_RP_SIGN_ALGO = os.getenv("OIDC_RP_SIGN_ALGO", default="")
OIDC_OP_JWKS_ENDPOINT = os.getenv("OIDC_OP_JWKS_ENDPOINT", default="")
LOGIN_REDIRECT_URL = os.getenv("LOGIN_REDIRECT_URL", default="")
LOGOUT_REDIRECT_URL = os.getenv("LOGOUT_REDIRECT_URL", default="")

# Handling allowed hosts a little different since we have to turn it into a list.
# If providing a value, you just need to provide a comma separated string of hosts
# You don't need to quote anything or add [] yourself.
if env.__contains__("ALLOWED_HOSTS"):
    ALLOWED_HOSTS = env("ALLOWED_HOSTS").split(',')
else:
    ALLOWED_HOSTS = ['*']

# Other Variables
DATA_UPLOAD_MAX_NUMBER_FIELDS = 2048
ROOT_URLCONF = 'opal.urls'
WSGI_APPLICATION = 'opal.wsgi.application'

if ENVIRONMENT == "production":
    SECURE_SSL_REDIRECT = True
else:
    print("Running in Development mode!")
    for k, v in sorted(os.environ.items()):
        print(k + ':', v)

# Application definition

# These are the applications defined in opal and map to OSCAL models.
# We track them separately here because we use this list for some functions
# that have to cycle through all apps
USER_APPS = ['common', 'catalog', 'control_profile', 'component_definition', 'ssp', ]

INSTALLED_APPS = ['django.contrib.admin', 'django.contrib.auth', 'mozilla_django_oidc', 'django.contrib.contenttypes',
                  'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', "bootstrap5",
                  'coverage', 'django_extensions', ]

# Add the user defined applications to INSTALLED_APPS
INSTALLED_APPS.extend(USER_APPS)

MIDDLEWARE = ['django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware',
              'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware',
              'django.contrib.auth.middleware.AuthenticationMiddleware',
              'django.contrib.messages.middleware.MessageMiddleware',
              'django.middleware.clickjacking.XFrameOptionsMiddleware', ]

ROOT_URLCONF = 'opal.urls'

TEMPLATES = [{
    'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [BASE_DIR / 'templates'], 'APP_DIRS': True,
    'OPTIONS': {
        'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request',
                               'django.contrib.auth.context_processors.auth',
                               'django.contrib.messages.context_processors.messages', ],
        },
    }, ]

# DEFAULT_FILE_STORAGE = 'binary_database_files.storage.DatabaseStorage'

WSGI_APPLICATION = 'opal.wsgi.application'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
if DATABASE == "postgres":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': env('DB_NAME'), 'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'), 'HOST': env('DB_HOST'), 'PORT': env('DB_PORT'),
            }
        }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, DB_NAME),
            }
        }

print("using database " + DATABASES['default']['NAME'])

# Adding support for SAML Authentication
if ENABLE_SAML:
    AUTHENTICATION_BACKENDS = ('mozilla_django_oidc.auth.OIDCAuthenticationBackend',)

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [{
    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    }, {
    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    }, {
    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    }, {
    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    }, ]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Logging Information
LOGGING = {
    'version': 1,
    # Version of logging
    'disable_existing_loggers': False,
    # disable logging
    # Formatters ###########################################################
    'formatters': {
        'verbose': {
            'format': '{levelname} : {asctime} : {filename} line {lineno} in function {funcName} : {message}',
            'style': '{',
            },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
            },
        },
    # Handlers #############################################################
    'handlers': {
        'file': {
            'level': LOG_LEVEL,
            'class': 'logging.FileHandler',
            'filename': 'opal-debug.log',
            'formatter': 'verbose'
        },
    ########################################################################
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    # Loggers ####################################################################
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'propagate': True,
        },
    },
}