"""
Django settings for opal project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import secrets
from pathlib import Path
import os
import environ

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = 'static/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = 'media/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

env = environ.Env()
if str(BASE_DIR) + "/opal/.env":
    environ.Env.read_env()
else:
    # print("Warning!!!  No .env file found, using default environment variables")
    environ.Env.read_env("str(BASE_DIR) + opal/defaults.env")

# Other Variables
DATA_UPLOAD_MAX_NUMBER_FIELDS = 2048
ROOT_URLCONF = 'opal.urls'
WSGI_APPLICATION = 'opal.wsgi.application'

if env("ENVIRONMENT") == "development":
    print("Running in Development mode!")

if env("ENVIRONMENT") == "production":
    SECURE_SSL_REDIRECT = True

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("OPAL_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")
# ALLOWED_HOSTS = env("ALLOWED_HOSTS")
ALLOWED_HOSTS = ("localhost", "127.0.0.1",)

# Application definition

USER_APPS = ['common', 'catalog', 'control_profile', 'component_definition', 'ssp', ]

INSTALLED_APPS = ['django.contrib.admin', 'django.contrib.auth', 'mozilla_django_oidc', 'django.contrib.contenttypes',
                  'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', "bootstrap5",
                  'coverage', 'django_extensions', ]

INSTALLED_APPS.extend(USER_APPS)

MIDDLEWARE = ['django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware',
              'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware',
              'django.contrib.auth.middleware.AuthenticationMiddleware',
              'django.contrib.messages.middleware.MessageMiddleware',
              'django.middleware.clickjacking.XFrameOptionsMiddleware', ]

ROOT_URLCONF = 'opal.urls'

TEMPLATES = [{
    'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [BASE_DIR / 'templates'], 'APP_DIRS': True,
    'OPTIONS': {
        'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request',
                               'django.contrib.auth.context_processors.auth',
                               'django.contrib.messages.context_processors.messages', ],
        },
    }, ]

# DEFAULT_FILE_STORAGE = 'binary_database_files.storage.DatabaseStorage'
# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

WSGI_APPLICATION = 'opal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

if env("DATABASE") == "postgres":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2', 'NAME': env('DB_NAME'), 'USER': env('DB_USER'),
            'PASSWORD': env('DB_PASSWORD'), 'HOST': env('DB_HOST'), 'PORT': env('DB_PORT'),
            }
        }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, env('DB_NAME')),
            }
        }
    print("using database " + DATABASES['default']['NAME'])

# Adding support for SAML Authentication
AUTHENTICATION_BACKENDS = ('mozilla_django_oidc.auth.OIDCAuthenticationBackend',)

OIDC_RP_CLIENT_ID = env('SAML_CLIENT_ID')
OIDC_RP_CLIENT_SECRET = env('SAML_CLIENT_SECRET')

OIDC_OP_AUTHORIZATION_ENDPOINT = "https://cs4p-dev.onelogin.com/oidc/2/auth"
OIDC_OP_TOKEN_ENDPOINT = "https://cs4p-dev.onelogin.com/oidc/2/token"
OIDC_OP_USER_ENDPOINT = "https://cs4p-dev.onelogin.com/oidc/2/me"

OIDC_RP_SIGN_ALGO = "RS256"
OIDC_OP_JWKS_ENDPOINT = "https://contentlab-dev.onelogin.com/oidc/2/certs"

LOGIN_REDIRECT_URL = "http://localhost:8000/"
LOGOUT_REDIRECT_URL = "http://localhost:8000/"

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [{
    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    }, {
    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    }, {
    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    }, {
    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    }, ]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

log_format = '%(asctime)s %(name)-12s %(pathname)s:%(lineno)d %(levelname)-8s %(message)s'

LOGGING = {
    'version': 1, 'disable_existing_loggers': False, 'handlers': {
        'file': {
            'level': env("LOG_LEVEL"), 'class': 'logging.FileHandler', 'filename': os.path.join(BASE_DIR, 'opal.log')
            }, 'debug': {
            'level': 'DEBUG', 'class': 'logging.FileHandler', 'filename': os.path.join(BASE_DIR, 'opal_debug.log')
            }, 'console': {
            'level': env("LOG_LEVEL"), 'class': 'logging.StreamHandler',
            }
        }, 'loggers': {
        'django': {
            'handlers': ['file', 'console'], 'level': env("LOG_LEVEL"), 'format': log_format, 'propagate': True,
            }, 'debug': {
            'handlers': ['console', 'debug'], 'level': 'DEBUG', 'format': log_format, 'propagate': True,
            }
        },
    }
