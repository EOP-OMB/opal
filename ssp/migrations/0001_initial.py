# Generated by Django 4.0.5 on 2022-07-09 16:09

import common.models
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
        ('component', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='authorization_boundaries',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('description', models.TextField(help_text="A summary of the system's authorization boundary.", verbose_name='Authorization Boundary Description')),
            ],
            options={
                'verbose_name': 'Authorization Boundary',
                'verbose_name_plural': 'Authorization Boundaries',
            },
        ),
        migrations.CreateModel(
            name='categorizations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('system', common.models.ShortTextField(help_text='Specifies the information type identification system used.', verbose_name='Information Type Identification System')),
            ],
            options={
                'verbose_name': 'Information Type Categorization',
                'verbose_name_plural': 'Information Type Categorizations',
            },
        ),
        migrations.CreateModel(
            name='data_flows',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('description', models.TextField(help_text="A summary of the system's Data Flow.", verbose_name='Data Flow Description')),
            ],
            options={
                'verbose_name': 'Data Flow',
                'verbose_name_plural': 'Data Flows',
            },
        ),
        migrations.CreateModel(
            name='diagrams',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('description', models.TextField(blank=True, help_text='A summary of the diagram. This description is intended to be used as alternate text to support compliance with requirements from Section 508 of the United States Workforce Rehabilitation Act of 1973.', verbose_name='Diagram Description')),
                ('caption', common.models.ShortTextField(help_text='A brief caption to annotate the diagram.', verbose_name='Caption')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
                ('props', common.models.properties_field(to='common.props')),
            ],
            options={
                'verbose_name': 'Diagram',
                'verbose_name_plural': 'Diagrams',
            },
        ),
        migrations.CreateModel(
            name='import_profiles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('href', common.models.ShortTextField(help_text="A resolvable URL reference to the profiles to use as the system's control baseline.", verbose_name='Profile Reference')),
            ],
            options={
                'verbose_name': 'Import Profile',
                'verbose_name_plural': 'Import Profiles',
            },
        ),
        migrations.CreateModel(
            name='information_type_ids',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('information_type_id', common.models.ShortTextField(help_text='An identifier qualified by the given identification system used, such as NIST SP 800-60.', verbose_name='Information Type Systematized Identifier')),
            ],
            options={
                'verbose_name': 'Information Type Systematized Identifier',
                'verbose_name_plural': 'Information Type Systematized Identifiers',
            },
        ),
        migrations.CreateModel(
            name='information_type_impact_level',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('base', common.models.ShortTextField(help_text='The prescribed base (Confidentiality, Integrity, or Availability) security impact level.', verbose_name='Base Level (Confidentiality, Integrity, or Availability)')),
                ('selected', common.models.ShortTextField(help_text='The selected (Confidentiality, Integrity, or Availability) security impact level.', null=True, verbose_name='Selected Level (Confidentiality, Integrity, or Availability)')),
                ('adjustment_justification', models.TextField(help_text='If the selected security level is different from the base security level, this contains the justification for the change.', null=True, verbose_name='Adjustment Justification')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
                ('props', common.models.properties_field(to='common.props')),
            ],
            options={
                'verbose_name': 'Information Type Impact Level',
                'verbose_name_plural': 'Information Type Impact Levels',
            },
        ),
        migrations.CreateModel(
            name='information_types',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('title', common.models.ShortTextField(help_text='A human readable name for the information type. This title should be meaningful within the context of the system.', verbose_name='Information Type Title')),
                ('description', common.models.ShortTextField(help_text='A summary of how this information type is used within the system.', verbose_name='Information Type Description')),
                ('availability_impact', models.ForeignKey(help_text='The expected level of impact resulting from the disruption of access to or use of the described information or the information system.', on_delete=django.db.models.deletion.CASCADE, related_name='availability_impact', to='ssp.information_type_impact_level', verbose_name='Availability Impact Level')),
                ('categorizations', common.models.CustomManyToManyField(help_text='A set of information type identifiers qualified by the given identification system used, such as NIST SP 800-60.', to='ssp.categorizations', verbose_name='Information Type Categorization')),
                ('confidentiality_impact', models.ForeignKey(help_text='The expected level of impact resulting from the unauthorized disclosure of the described information.', on_delete=django.db.models.deletion.CASCADE, related_name='confidentiality_impact', to='ssp.information_type_impact_level', verbose_name='Confidentiality Impact Level')),
                ('integrity_impact', models.ForeignKey(help_text='The expected level of impact resulting from the unauthorized modification of the described information.', on_delete=django.db.models.deletion.CASCADE, related_name='integrity_impact', to='ssp.information_type_impact_level', verbose_name='Integrity Impact Level')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
                ('props', common.models.properties_field(to='common.props')),
            ],
            options={
                'get_latest_by': 'updated_at',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='inventory_items',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('description', models.TextField(help_text='A summary of the inventory item stating its purpose within the system.', verbose_name='Inventory Item Description')),
                ('implemented_components', common.models.CustomManyToManyField(help_text='The set of components that are implemented in a given system inventory item.', to='component.components', verbose_name='Implemented Components')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
                ('props', common.models.properties_field(to='common.props')),
                ('responsible_parties', common.models.CustomManyToManyField(help_text='A reference to a set of organizations or persons that have responsibility for performing a referenced role in the context of the containing object.', to='common.responsible_parties', verbose_name='Responsible Parties')),
            ],
            options={
                'verbose_name': 'Inventory Item',
                'verbose_name_plural': 'Inventory Items',
            },
        ),
        migrations.CreateModel(
            name='leveraged_authorizations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('title', common.models.ShortTextField(help_text='A human readable name for the leveraged authorization in the context of the system.', verbose_name='Title')),
                ('date_authorized', models.DateField(help_text='The date the system received its authorization.', verbose_name='System Authorization Date')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
                ('party_uuid', models.ForeignKey(help_text='A reference to the party that manages the leveraged system.', on_delete=django.db.models.deletion.CASCADE, to='common.parties', verbose_name='Responsible Party')),
                ('props', common.models.properties_field(to='common.props')),
            ],
            options={
                'verbose_name': 'Authorization',
                'verbose_name_plural': 'Authorizations',
            },
        ),
        migrations.CreateModel(
            name='network_architectures',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('description', models.TextField(help_text="A summary of the system's Network Architecture.", verbose_name='Network Architecture Description')),
                ('diagrams', common.models.CustomManyToManyField(help_text='A graphic that provides a visual representation the Network Architecture, or some aspect of it.', to='ssp.diagrams', verbose_name='Diagram(s)')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
                ('props', common.models.properties_field(to='common.props')),
            ],
            options={
                'verbose_name': 'Network Architecture',
                'verbose_name_plural': 'Network Architectures',
            },
        ),
        migrations.CreateModel(
            name='privileges',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('title', common.models.ShortTextField(help_text='A name given to the user, which may be used by a tool for display and navigation.', verbose_name='User Title')),
                ('description', models.TextField(help_text=" A summary of the user's purpose within the system.", verbose_name='User Description')),
            ],
            options={
                'verbose_name': 'Privilege',
                'verbose_name_plural': 'Privileges',
            },
        ),
        migrations.CreateModel(
            name='system_characteristics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('system_name', common.models.ShortTextField(help_text='The full name of the system.', verbose_name='System Name - Full')),
                ('system_name_short', common.models.ShortTextField(help_text='A short name for the system, such as an acronym, that is suitable for display in a data table or summary list.', null=True, verbose_name='System Name - Short')),
                ('description', models.TextField(help_text='A summary of the system.', null=True, verbose_name='System Description')),
                ('date_authorized', models.DateField(help_text='The date the system received its authorization.', null=True, verbose_name='System Authorization Date')),
                ('security_sensitivity_level', common.models.ShortTextField(help_text='The overall information system sensitivity categorization, such as defined by FIPS-199.', null=True, verbose_name='Security Sensitivity Level')),
                ('security_impact_level', common.models.ShortTextField(help_text='The overall level of expected impact resulting from unauthorized disclosure, modification, or loss of access to information.', null=True, verbose_name='Security Impact Level')),
                ('security_objective_confidentiality', common.models.ShortTextField(help_text='A target-level of confidentiality for the system, based on the sensitivity of information within the system.', null=True, verbose_name='Security Objective: Confidentiality')),
                ('security_objective_integrity', common.models.ShortTextField(help_text='A target-level of integrity for the system, based on the sensitivity of information within the system.', null=True, verbose_name='Security Objective: Integrity')),
                ('security_objective_availability', common.models.ShortTextField(help_text='A target-level of availability for the system, based on the sensitivity of information within the system.', null=True, verbose_name='Security Objective: Availability')),
                ('status', common.models.ShortTextField(choices=[('operational', 'Operational: The system or component is currently operating in production.'), ('under-development', 'Under Development: The system or component is being designed, developed, or implemented'), ('under-major-modification', 'Under Major Modification: The system or component is undergoing a major change, development, or transition.'), ('disposition', 'Disposition: The system or component is no longer operational.'), ('other', 'Other: Some other state, a remark must be included to describe the current state.')], help_text='Describes the operational status of the system.', null=True, verbose_name='Status')),
                ('authorization_boundary', models.ForeignKey(help_text="A description of this system's authorization boundary, optionally supplemented by diagrams that illustrate the authorization boundary.", null=True, on_delete=django.db.models.deletion.CASCADE, to='ssp.authorization_boundaries', verbose_name='Authorization Boundary')),
                ('data_flow', models.ForeignKey(help_text="A description of the system's data flow, optionally supplemented by diagrams that illustrate the data flow.", null=True, on_delete=django.db.models.deletion.CASCADE, to='ssp.data_flows', verbose_name='Data Flow')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
                ('network_architecture', models.ForeignKey(help_text="A description of the system's network architecture, optionally supplemented by diagrams that illustrate the network architecture.", null=True, on_delete=django.db.models.deletion.CASCADE, to='ssp.network_architectures', verbose_name='Network Architecture')),
                ('props', common.models.properties_field(to='common.props')),
                ('responsible_parties', common.models.CustomManyToManyField(help_text='A reference to a set of organizations or persons that have responsibility for performing a referenced role in the context of the containing object.', to='common.responsible_parties', verbose_name='Responsible Parties')),
            ],
            options={
                'verbose_name': 'System Characteristics',
                'verbose_name_plural': 'Systems Characteristics',
            },
        ),
        migrations.CreateModel(
            name='system_functions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('system_functions', common.models.ShortTextField(help_text='Describes a function performed for a given authorized privilege by this user class.', verbose_name='Function')),
            ],
            options={
                'verbose_name': 'Function',
                'verbose_name_plural': 'Functions',
            },
        ),
        migrations.CreateModel(
            name='system_ids',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('identifier_type', common.models.ShortTextField(help_text='Identifies the identification system from which the provided identifier was assigned.', verbose_name='Identification System Type')),
                ('system_id', common.models.ShortTextField(verbose_name='System Identification')),
            ],
            options={
                'verbose_name': 'System Identification',
                'verbose_name_plural': 'System Identifications',
            },
        ),
        migrations.CreateModel(
            name='system_implementations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('components', common.models.CustomManyToManyField(help_text='A defined component that can be part of an implemented system. Components may be products, services, application programming interface (APIs), policies, processes, plans, guidance, standards, or other tangible items that enable security and/or privacy.', to='component.components', verbose_name='Components')),
                ('inventory_items', common.models.CustomManyToManyField(help_text='A set of inventory-item entries that represent the managed inventory instances of the system.', to='ssp.inventory_items', verbose_name='Inventory Items')),
                ('leveraged_authorizations', common.models.CustomManyToManyField(help_text='A description of another authorized system from which this system inherits capabilities that satisfy security requirements. Another term for this concept is a common control provider.', to='ssp.leveraged_authorizations', verbose_name='Leveraged Authorizations')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
                ('props', common.models.properties_field(to='common.props')),
            ],
            options={
                'verbose_name': 'System Implementation',
                'verbose_name_plural': 'System Implementations',
            },
        ),
        migrations.CreateModel(
            name='users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('title', common.models.ShortTextField(help_text='A name given to the user, which may be used by a tool for display and navigation.', verbose_name='User Title')),
                ('short_name', common.models.ShortTextField(help_text='A short common name, abbreviation, or acronym for the user.', verbose_name='User Short Name')),
                ('description', models.TextField(help_text=" A summary of the user's purpose within the system.", verbose_name='User Description')),
                ('authorized_privileges', common.models.CustomManyToManyField(help_text='Identifies a specific system privilege held by the user, along with an associated description and/or rationale for the privilege.', to='ssp.privileges', verbose_name='Privilege')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
                ('props', common.models.properties_field(to='common.props')),
                ('role_ids', common.models.CustomManyToManyField(help_text='A reference to the roles served by the user.', to='common.roles', verbose_name='User Role(s)')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='systems_information',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('information_types', common.models.CustomManyToManyField(help_text='Contains details about one information type that is stored, processed, or transmitted by the system, such as privacy information, and those defined in NIST SP 800-60.', to='ssp.information_types', verbose_name='Information Type')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
                ('props', common.models.properties_field(to='common.props')),
            ],
            options={
                'verbose_name': 'System Information',
                'verbose_name_plural': 'Systems Information',
            },
        ),
        migrations.CreateModel(
            name='system_security_plans',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('back_matter', models.ForeignKey(help_text="Provides a collection of identified resource objects that can be referenced by a link with a rel value of 'reference' and an href value that is a fragment '#' followed by a reference to a reference identifier. Other specialized link 'rel' values also use this pattern when indicated in that context of use.", null=True, on_delete=django.db.models.deletion.CASCADE, to='common.back_matter', verbose_name='Back matter')),
                ('control_implementation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='component.control_implementations')),
                ('import_profile', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='ssp.import_profiles')),
                ('metadata', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='common.metadata')),
                ('system_characteristics', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssp.system_characteristics')),
                ('system_implementation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ssp.system_implementations')),
            ],
            options={
                'verbose_name': 'System Security Plan (SSP)',
                'verbose_name_plural': 'System Security Plans (SSPs)',
            },
        ),
        migrations.AddField(
            model_name='system_implementations',
            name='users',
            field=common.models.CustomManyToManyField(help_text='A type of user that interacts with the system based on an associated role.', to='ssp.users', verbose_name='System Users'),
        ),
        migrations.AddField(
            model_name='system_characteristics',
            name='system_ids',
            field=common.models.CustomManyToManyField(help_text='One or more unique identifier(s) for the system described by this system security plan.', to='ssp.system_ids', verbose_name='Alternative System Identifier'),
        ),
        migrations.AddField(
            model_name='system_characteristics',
            name='system_information',
            field=common.models.CustomManyToManyField(help_text='Contains details about all information types that are stored, processed, or transmitted by the system, such as privacy information, and those defined in NIST SP 800-60.', to='ssp.systems_information', verbose_name='System Information'),
        ),
        migrations.AddField(
            model_name='privileges',
            name='functions_performed',
            field=common.models.CustomManyToManyField(help_text='Describes a function performed for a given authorized privilege by this user class.', to='ssp.system_functions', verbose_name='Functions Performed'),
        ),
        migrations.AddField(
            model_name='data_flows',
            name='diagrams',
            field=common.models.CustomManyToManyField(help_text='A graphic that provides a visual representation the Data Flow, or some aspect of it.', to='ssp.diagrams', verbose_name='Diagram(s)'),
        ),
        migrations.AddField(
            model_name='data_flows',
            name='links',
            field=common.models.CustomManyToManyField(to='common.links', verbose_name='Links'),
        ),
        migrations.AddField(
            model_name='data_flows',
            name='props',
            field=common.models.properties_field(to='common.props'),
        ),
        migrations.AddField(
            model_name='categorizations',
            name='information_type_ids',
            field=common.models.CustomManyToManyField(help_text='An identifier qualified by the given identification system used, such as NIST SP 800-60.', to='ssp.information_type_ids', verbose_name='Information Type Systematized Identifier'),
        ),
        migrations.AddField(
            model_name='authorization_boundaries',
            name='diagrams',
            field=common.models.CustomManyToManyField(help_text='A graphic that provides a visual representation the Authorization Boundary, or some aspect of it.', to='ssp.diagrams', verbose_name='Diagram(s)'),
        ),
        migrations.AddField(
            model_name='authorization_boundaries',
            name='links',
            field=common.models.CustomManyToManyField(to='common.links', verbose_name='Links'),
        ),
        migrations.AddField(
            model_name='authorization_boundaries',
            name='props',
            field=common.models.properties_field(to='common.props'),
        ),
    ]
