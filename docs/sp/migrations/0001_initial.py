# Generated by Django 4.0.5 on 2022-07-09 16:09

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='IdP',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('url_params', models.JSONField(blank=True, default=dict, help_text='Application-specific URL path parameters.', unique=True, verbose_name='URL Parameters')),
                ('base_url', models.CharField(help_text='Root URL for the site, including http/https, no trailing slash.', max_length=200, verbose_name='Base URL')),
                ('entity_id', models.CharField(blank=True, help_text='Leave blank to automatically use the metadata URL.', max_length=200, verbose_name='Entity ID')),
                ('contact_name', models.CharField(max_length=100)),
                ('contact_email', models.EmailField(max_length=100)),
                ('x509_certificate', models.TextField(blank=True)),
                ('private_key', models.TextField(blank=True)),
                ('certificate_expires', models.DateTimeField(blank=True, null=True)),
                ('metadata_url', models.URLField(blank=True, help_text='Leave this blank if entering metadata XML directly.', max_length=500, verbose_name='Metadata URL')),
                ('verify_metadata_cert', models.BooleanField(default=True, verbose_name='Verify metadata URL certificate')),
                ('metadata_xml', models.TextField(blank=True, help_text='Automatically loaded from the metadata URL, if specified. Otherwise input directly.', verbose_name='Metadata XML')),
                ('lowercase_encoding', models.BooleanField(default=False, help_text='Check this if the identity provider is ADFS.')),
                ('saml_settings', models.TextField(blank=True, editable=False, help_text='Settings imported and used by the python-saml library.')),
                ('last_import', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True)),
                ('auth_case_sensitive', models.BooleanField(default=True, verbose_name='NameID is case sensitive')),
                ('create_users', models.BooleanField(default=True, verbose_name='Create users that do not already exist')),
                ('associate_users', models.BooleanField(default=True, verbose_name='Associate existing users with this IdP by username')),
                ('username_prefix', models.CharField(blank=True, help_text='Prefix for usernames generated by this IdP', max_length=20)),
                ('username_suffix', models.CharField(blank=True, help_text='Suffix for usernames generated by this IdP', max_length=20)),
                ('respect_expiration', models.BooleanField(default=False, help_text='Expires the Django session based on the IdP session expiration. Only works when using SESSION_SERIALIZER=PickleSerializer.', verbose_name='Respect IdP session expiration')),
                ('logout_triggers_slo', models.BooleanField(default=False, help_text='Whether logging out should trigger a SLO request to the IdP.', verbose_name='Logout triggers SLO')),
                ('login_redirect', models.CharField(blank=True, help_text='URL name or path to redirect after a successful login.', max_length=200)),
                ('logout_redirect', models.CharField(blank=True, help_text='URL name or path to redirect after logout.', max_length=200)),
                ('last_login', models.DateTimeField(blank=True, default=None, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('authenticate_method', models.CharField(blank=True, max_length=200)),
                ('login_method', models.CharField(blank=True, max_length=200)),
                ('logout_method', models.CharField(blank=True, max_length=200)),
                ('state_timeout', models.IntegerField(default=60, help_text='Time (in seconds) the SAML login request state is valid for.')),
            ],
            options={
                'verbose_name': 'identity provider',
            },
        ),
        migrations.CreateModel(
            name='IdPUserDefaultValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field', models.CharField(max_length=200)),
                ('value', models.TextField()),
                ('idp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_defaults', to='sp.idp', verbose_name='identity provider')),
            ],
            options={
                'verbose_name': 'user default value',
                'verbose_name_plural': 'user default values',
                'unique_together': {('idp', 'field')},
            },
        ),
        migrations.CreateModel(
            name='IdPUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nameid', models.CharField(db_index=True, max_length=200)),
                ('user_id', models.CharField(max_length=100)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='idp_users', to='contenttypes.contenttype')),
                ('idp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='users', to='sp.idp')),
            ],
            options={
                'unique_together': {('idp', 'nameid'), ('idp', 'content_type', 'user_id')},
            },
        ),
        migrations.CreateModel(
            name='IdPAttribute',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saml_attribute', models.CharField(max_length=200)),
                ('mapped_name', models.CharField(blank=True, max_length=200)),
                ('is_nameid', models.BooleanField(default=False, help_text='Check if this should be the unique identifier of the SSO identity.', verbose_name='Is NameID')),
                ('always_update', models.BooleanField(default=False, help_text='Update this mapped user field on every successful authentication. By default, mapped fields are only set on user creation.', verbose_name='Always Update')),
                ('idp', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='sp.idp', verbose_name='identity provider')),
            ],
            options={
                'verbose_name': 'attribute mapping',
                'verbose_name_plural': 'attribute mappings',
                'unique_together': {('idp', 'saml_attribute')},
            },
        ),
    ]
