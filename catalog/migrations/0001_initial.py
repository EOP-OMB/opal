# Generated by Django 4.0.5 on 2022-07-09 16:09

import common.models
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('common', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='constraints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('description', models.TextField(help_text='A textual summary of the constraint to be applied.', verbose_name='Constraint Description')),
            ],
            options={
                'verbose_name': 'Constraint',
                'verbose_name_plural': 'Constraints',
            },
        ),
        migrations.CreateModel(
            name='controls',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('control_id', common.models.ShortTextField(help_text="A unique identifier for a specific control instance that can be used to reference the control in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same control across minor revisions of the document.", verbose_name='Control Identifier')),
                ('control_class', common.models.ShortTextField(help_text='A textual label that provides a sub-type or characterization of the control.', verbose_name='Control Class')),
                ('title', common.models.ShortTextField(help_text=' A name given to the control, which may be used by a tool for display and navigation.', verbose_name='Control Title')),
                ('control_enhancements', common.models.CustomManyToManyField(help_text='Additional sub-controls', to='catalog.controls', verbose_name='Control Enhancements')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
            ],
            options={
                'verbose_name': 'Control',
                'verbose_name_plural': 'Controls',
                'ordering': ['control_id'],
            },
        ),
        migrations.CreateModel(
            name='guidelines',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('prose', models.TextField(help_text='Prose permits multiple paragraphs, lists, tables etc.', verbose_name='Prose')),
            ],
            options={
                'verbose_name': 'Guideline',
                'verbose_name_plural': 'Guidelines',
            },
        ),
        migrations.CreateModel(
            name='tests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('expression', common.models.ShortTextField(help_text='A formal (executable) expression of a constraint', verbose_name='Constraint test')),
            ],
            options={
                'verbose_name': 'Test',
                'verbose_name_plural': 'Tests',
            },
        ),
        migrations.CreateModel(
            name='parts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('part_id', common.models.ShortTextField(blank=True, help_text="A unique identifier for a specific part instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same part across minor revisions of the document.", verbose_name='Part Identifier')),
                ('name', common.models.ShortTextField(help_text=" A textual label that uniquely identifies the part's semantic type.", verbose_name='Part Name')),
                ('ns', common.models.ShortTextField(blank=True, help_text="A namespace qualifying the part's name. This allows different organizations to associate distinct semantics with the same name.", verbose_name='Part Namespace')),
                ('part_class', common.models.ShortTextField(blank=True, help_text="A textual label that provides a sub-type or characterization of the part's name. This can be used to further distinguish or discriminate between the semantics of multiple parts of the same control with the same name and ns.", verbose_name='Part Class')),
                ('title', common.models.ShortTextField(blank=True, help_text='A name given to the part, which may be used by a tool for display and navigation.', verbose_name='Part Title')),
                ('prose', models.TextField(help_text='Permits multiple paragraphs, lists, tables etc.', verbose_name='Part Text')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
                ('props', common.models.properties_field(to='common.props')),
                ('sub_parts', common.models.CustomManyToManyField(help_text='A part can have child parts allowing for arbitrary nesting of prose content (e.g., statement hierarchy).', to='catalog.parts', verbose_name='Sub Parts')),
            ],
            options={
                'verbose_name': 'Part',
                'verbose_name_plural': 'Parts',
            },
        ),
        migrations.CreateModel(
            name='params',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('remarks', models.TextField(blank=True, default='', help_text='Additional commentary on the containing object.', verbose_name='Remarks')),
                ('param_id', common.models.ShortTextField(help_text="A unique identifier for a specific parameter instance. This identifier's uniqueness is document scoped and is intended to be consistent for the same parameter across minor revisions of the document.", verbose_name='Parameter Identifier')),
                ('param_class', common.models.ShortTextField(blank=True, help_text='A textual label that provides a characterization of the parameter. A class can be used in validation rules to express extra constraints over named items of a specific class value.', verbose_name='Parameter Class')),
                ('label', common.models.ShortTextField(help_text='A short, placeholder name for the parameter, which can be used as a substitute for a value if no value is assigned.', verbose_name='Parameter Label')),
                ('usage', models.TextField(help_text='Describes the purpose and use of a parameter', verbose_name='Parameter Usage Description')),
                ('values', common.models.ShortTextField(blank=True, help_text='An array of comma seperated value strings', verbose_name='Values')),
                ('select', common.models.ShortTextField(blank=True, help_text='Presenting a choice among alternatives', verbose_name='Selection')),
                ('how_many', common.models.ShortTextField(choices=[('one', 'Only one value is permitted.'), ('one-or-more', 'One or more values are permitted.')], help_text='Describes the number of selections that must occur. Without this setting, only one value should be assumed to be permitted.', verbose_name='Parameter Cardinality')),
                ('choice', models.TextField(help_text='A list of values. One value per line', verbose_name='Choices')),
                ('constraints', common.models.CustomManyToManyField(help_text='A formal or informal expression of a constraint or test', to='catalog.constraints', verbose_name='Constraints')),
                ('depends_on', models.ForeignKey(help_text=' Another parameter invoking this one', null=True, on_delete=django.db.models.deletion.CASCADE, to='catalog.params', verbose_name='Depends on')),
                ('guidelines', common.models.CustomManyToManyField(help_text='A prose statement that provides a recommendation for the use of a parameter.', to='catalog.guidelines', verbose_name='Guidelines')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
            ],
            options={
                'verbose_name': 'Parameter',
                'verbose_name_plural': 'Parameters',
                'ordering': ['param_id'],
            },
        ),
        migrations.CreateModel(
            name='groups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('group_id', common.models.ShortTextField(help_text="A unique identifier for a specific control instance that can be used to reference the control in other OSCAL documents. This identifier's uniqueness is document scoped and is intended to be consistent for the same control across minor revisions of the document.", verbose_name='Control Identifier')),
                ('group_class', common.models.ShortTextField(help_text='A textual label that provides a sub-type or characterization of the control.', verbose_name='Group Class')),
                ('title', common.models.ShortTextField(help_text=' A name given to the control, which may be used by a tool for display and navigation.', verbose_name='Control Title')),
                ('controls', common.models.CustomManyToManyField(help_text='A structured information object representing a security or privacy control. Each security or privacy control within the Catalog is defined by a distinct control instance.', to='catalog.controls', verbose_name='Controls')),
                ('links', common.models.CustomManyToManyField(to='common.links', verbose_name='Links')),
                ('params', common.models.CustomManyToManyField(help_text='Parameters that should be applied to all Controls in the Group', to='catalog.params', verbose_name='Global Group Parameters')),
                ('parts', common.models.CustomManyToManyField(help_text="A partition of a control's definition or a child of another part.", to='catalog.parts', verbose_name='Parts')),
                ('props', common.models.properties_field(to='common.props')),
                ('sub_groups', common.models.CustomManyToManyField(help_text='A group of controls, or of groups of controls.', to='catalog.groups', verbose_name='Sub Groups')),
            ],
            options={
                'verbose_name': 'Group',
                'verbose_name_plural': 'Groups',
                'ordering': ['group_id'],
            },
        ),
        migrations.AddField(
            model_name='controls',
            name='params',
            field=common.models.CustomManyToManyField(help_text='Parameters provide a mechanism for the dynamic assignment of value(s) in a control.', to='catalog.params', verbose_name='Control Parameters'),
        ),
        migrations.AddField(
            model_name='controls',
            name='parts',
            field=common.models.CustomManyToManyField(help_text="A partition of a control's definition or a child of another part.", to='catalog.parts', verbose_name='Parts'),
        ),
        migrations.AddField(
            model_name='controls',
            name='props',
            field=common.models.properties_field(to='common.props'),
        ),
        migrations.AddField(
            model_name='constraints',
            name='tests',
            field=common.models.CustomManyToManyField(help_text='A test expression which is expected to be evaluated by a tool', to='catalog.tests', verbose_name='Constraint Test'),
        ),
        migrations.CreateModel(
            name='catalogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('uuid', common.models.ShortTextField(verbose_name='Catalog Universally Unique Identifier')),
                ('back_matter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='common.back_matter', verbose_name='Back Matter')),
                ('controls', common.models.CustomManyToManyField(to='catalog.controls', verbose_name='Controls')),
                ('groups', common.models.CustomManyToManyField(to='catalog.groups', verbose_name='Groups')),
                ('metadata', models.ForeignKey(help_text='Provides information about the publication and availability of the containing document.', on_delete=django.db.models.deletion.CASCADE, to='common.metadata', verbose_name='Publication metadata')),
                ('params', common.models.CustomManyToManyField(help_text='Parameters that should be applied to all Controls in the Catalog', to='catalog.params', verbose_name='Global Catalog Parameters')),
            ],
            options={
                'verbose_name': 'Control Catalog',
                'verbose_name_plural': 'Control Catalogs',
            },
        ),
    ]
